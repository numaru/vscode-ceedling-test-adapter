{
  "name": "vscode-ceedling-test-adapter",
  "displayName": "Ceedling Test Explorer",
  "description": "Run your Ceedling tests in the Sidebar of Visual Studio Code",
  "icon": "img/icon.png",
  "author": {
    "name": "Kin Numaru"
  },
  "publisher": "numaru",
  "version": "1.12.0",
  "license": "MIT",
  "homepage": "https://github.com/numaru/vscode-ceedling-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/numaru/vscode-ceedling-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/numaru/vscode-ceedling-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "ceedling",
    "test",
    "testing"
  ],
  "main": "out/src/main.js",
  "scripts": {
    "clean": "rimraf out *.vsix",
    "vscode:prepublish": "npm run -S esbuild-base -- --minify",
    "esbuild-base": "rimraf out && esbuild ./src/main.ts --bundle --outfile=out/src/main.js --external:vscode --format=cjs --platform=node",
    "build": "npm run -S esbuild-base -- --sourcemap",
    "watch": "npm run -S esbuild-base -- --sourcemap --watch",
    "rebuild": "npm run clean && npm run build",
    "package": "vsce package",
    "publish": "vsce publish",
    "test": "tsc -p test.tsconfig.json && node ./out/tests/integration/main.js"
  },
  "dependencies": {
    "@types/js-yaml": "^3.12.0",
    "@types/semver": "^7.5.4",
    "@types/xml2js": "^0.4.3",
    "async-mutex": "^0.1.3",
    "js-yaml": "^3.13.1",
    "semver": "^7.5.4",
    "strip-ansi": "^6.0.0",
    "tree-kill": "^1.2.2",
    "tslib": "^1.9.3",
    "vscode-test-adapter-api": "^1.2.0",
    "vscode-test-adapter-util": "^0.5.1",
    "xml2js": "^0.6.2"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.0",
    "@types/vscode": "^1.71.0",
    "@vscode/test-electron": "^2.3.8",
    "@vscode/vsce": "^2.22.0",
    "esbuild": "^0.19.11",
    "glob": "^7.1.6",
    "mocha": "^10.0.0",
    "typescript": "^4.6.3"
  },
  "engines": {
    "vscode": "^1.71.0"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Ceedling Test Explorer configuration",
      "properties": {
        "ceedlingExplorer.projectPath": {
          "description": "Path to the Ceedling project directory",
          "type": "string",
          "default": ".",
          "scope": "resource"
        },
        "ceedlingExplorer.projectCustom": {
          "markdownDescription": "Optionnal YAML file, configuration of this file will be merged with the main project file (project.yml) at runtime. Example `your_config.yml` will be used as `ceedling project:your_config.yml` usefull to add specific compiler configurations",
          "type": "string",
          "default": "null",
          "scope": "resource"
          },
        "ceedlingExplorer.shellPath": {
          "description": "Path to the shell where Ceedling is installed",
          "type": "string",
          "default": "null",
          "scope": "resource"
        },
        "ceedlingExplorer.debugConfiguration": {
          "description": "Debug configuration to run during test debug.",
          "type": "string",
          "scope": "resource"
        },
        "ceedlingExplorer.prettyTestLabel": {
          "markdownDescription": "Test label is prettier in the test explorer, that mean the label is shorter and without begin prefix. E.g. inactive `test_BlinkTaskShouldToggleLed`, active `BlinkTaskShouldToggleLed`",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "ceedlingExplorer.prettyTestFileLabel": {
          "markdownDescription": "Test file label is prettier in the test explorer, that mean the label is shorter, without begin prefix, path and file type. E.g. inactive `test/LEDs/test_BlinkTask.c`, active `BlinkTask`",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "ceedlingExplorer.testCommandArgs": {
          "markdownDescription": "The command line arguments used to run the Ceedling tests",
          "type": "array",
          "default": [
            "test:${TEST_ID}"
          ],
          "scope": "resource"
        },
        "ceedlingExplorer.problemMatching": {
          "markdownDescription": "Configuration of mechanism that scans Ceedling output text for known error/warning/info strings and reports these inline in the editor and in the Problems panel.&nbsp;The mechanism tries to resemble the one used in VSCode Tasks problemMatchers.",
          "type": "object",
          "scope": "resource",
          "properties": {
            "mode": {
              "description": "Mode of problem matching. It is either disabled, uses preset (i.e. gcc) or uses custom patterns from patterns array.",
              "type": "string",
              "enum": [
                "disabled",
                "patterns",
                "gcc"
              ],
              "default": "disabled"
            },
            "patterns": {
              "description": "Array of custom pattern objects used for problem matching.",
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "title": "Problem matching pattern.",
                "required": [
                  "regexp",
                  "message",
                  "file"
                ],
                "properties": {
                  "scanStdout": {
                    "description": "Scan stdout output for problems.",
                    "type": "boolean",
                    "default": false
                  },
                  "scanStderr": {
                    "description": "Scan stderr output for problems.",
                    "type": "boolean",
                    "default": true
                  },
                  "severity": {
                    "description": "Severity of messages found by this pattern.",
                    "type": "string",
                    "enum": [
                      "error",
                      "warning",
                      "info"
                    ],
                    "default": "info"
                  },
                  "filePrefix": {
                    "markdownDescription": "Used to determine file's absolute path if file location is relative.&nbsp;${projectPath} replaced with project path. Not used if empty or not defined.",
                    "type": "string",
                    "default": ""
                  },
                  "regexp": {
                    "description": "The regular expression that is used to find an error, warning or info in the output line.",
                    "type": "string"
                  },
                  "message": {
                    "description": "Index of the problem's message in the regular expression.",
                    "type": "integer"
                  },
                  "file": {
                    "description": "Index of the problem's filename in the regular expression.",
                    "type": "integer"
                  },
                  "line": {
                    "description": "Index of the problem's (first) line in the regular expression. Not used if null or not defined.",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "default": null
                  },
                  "lastLine": {
                    "description": "Index of the problem's last line in the regular expression. Not used if null or not defined.",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "default": null
                  },
                  "column": {
                    "description": "Index of the problem's (first) column in the regular expression. Not used if null or not defined.",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "default": null
                  },
                  "lastColumn": {
                    "description": "Index of the problem's last column in the regular expression. Not used if null or not defined.",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "default": null
                  }
                }
              }
            }
          }
        },
        "ceedlingExplorer.testCaseMacroAliases": {
          "markdownDescription": "An array of aliases for the `TEST_CASE` macro",
          "type": "array",
          "default": [
            "TEST_CASE"
          ],
          "scope": "resource"
        },
        "ceedlingExplorer.testRangeMacroAliases": {
          "markdownDescription": "An array of aliases for the `TEST_RANGE` macro",
          "type": "array",
          "default": [
            "TEST_RANGE"
          ],
          "scope": "resource"
        },
        "ceedlingExplorer.ansiEscapeSequencesRemoved": {
          "markdownDescription": "Should the ansi escape sequences be removed from ceedling stdout and stderr",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "ceedlingExplorer.clean",
        "title": "Ceedling: Clean"
      },
      {
        "command": "ceedlingExplorer.clobber",
        "title": "Ceedling: Clobber"
      }
    ]
  }
}
